"""Цель задания: Освоить создание функций с параметрами по умолчанию и практику вызова этих функций с различным
количеством аргументов.
# Задача "Распаковка":"""

""" 
1.Функция с параметрами по умолчанию:
# Создайте функцию print_params(a = 1, b = 'строка', c = True), которая принимает три параметра со значениями по 
умолчанию (например сейчас это: 1, 'строка', True).
# Функция должна выводить эти параметры.
# Вызовите функцию print_params с разным количеством аргументов, включая вызов без аргументов.
# Проверьте, работают ли вызовы print_params(b = 25) print_params(c = [1,2,3])
"""
def print_params(a=1, b="строка", c=True):
    print(a, b, c)

# Вызовы функции
print_params()  # Вызов без аргументов - используются значения по умолчанию (1 строка True)
print_params(5)  # Передан один аргумент, остальные по умолчанию Вывод: (5 строка True)
print_params(5, "новая строка")  # Переданы два аргумента (5 новая строка True)
print_params(b= 25)  # Передан только аргумент b (1 25 True)
print_params(c=[1, 2, 3])  # Передан только аргумент c (1 строка [1, 2, 3])

""" 
2.Распаковка параметров:
Создайте список values_list с тремя элементами разных типов.
Создайте словарь values_dict с тремя ключами, соответствующими параметрам функции print_params, 
и значениями разных типов.
Передайте values_list и values_dict в функцию print_params, 
используя распаковку параметров (* для списка и ** для словаря).
"""
values_list = [2, "string", False]
values_dict = {"a": 1, "b": "строка", "c": True}
# Вызовы функции
print_params(*values_list)  # (2 string False)
print_params(**values_dict)  # (1 строка True)

"""
3.Распаковка + отдельные параметры:
Создайте список values_list_2 с двумя элементами разных типов
Проверьте, работает ли print_params(*values_list_2, 42)
"""
values_list_2 = [54.32, "Строка"]
print_params(*values_list_2, 42) # Результат (54.32 Строка 42)
                                    # т.е список из двух значений распаковался как значения a и b